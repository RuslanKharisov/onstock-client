import { dbClient } from "@/shared/lib/db";
import { cache } from "react";
class ProductsRepository {
  async getProductsList(): Promise<ProductListElement[]> {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
    const connection = await dbClient.$connect();
    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const products = await dbClient.product.findMany();
      return products;
    } finally {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      await dbClient.$disconnect();
    }
  }

  addOrUpdateProduct = async (command: addOrUpdateProductCommand) => {
    const { sku, name, description, quantity, supplierId, email } = command;

    try {
      // –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ sku
      const existingProduct = await dbClient.product.findUnique({
        where: {
          sku: command.sku,
        },
      });
      // –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –ø–æ id –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
      const supplierStock = await dbClient.stock.findMany({
        where: {
          supplierId: command.supplierId,
        },
      });
      const isProductExistInSupplierStock = await dbClient.stock.findFirst({
        where: {
          productId: existingProduct?.id,
          supplierId: command.supplierId,
        },
      });
      // –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (existingProduct) {
        console.log("üöÄ existingProduct:", existingProduct);
        console.log(
          "üöÄ isProductExistInSupplierStock:",
          isProductExistInSupplierStock,
        );
        console.log("üöÄ command.supplierId:", command.supplierId);
        if (isProductExistInSupplierStock?.id) {
          console.log("—Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω —É –ø–æ—Å—Ç–≤—â–∏–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ");
          await dbClient.stock.update({
            where: {
              id: isProductExistInSupplierStock.id,
              productId: existingProduct?.id,
            },
            data: {
              quantity: command.quantity,
            },
          });
        } else {
          await dbClient.stock.create({
            data: {
                productId: existingProduct.id,
                supplierId: command.supplierId,
                quantity: command.quantity,
              },
          });
        }
      } else {
        // –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
        console.log("üöÄ ~ ProductsRepository ~ –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:");
        const newProduct = await dbClient.product.create({
          data: {
            sku: command.sku,
            name: command.name,
            description: command.description,
            Stock: {
              create: {
                quantity: command.quantity,
                supplier: {
                  connect: { id: command.supplierId },
                },
              },
            },
          },
          include: {
            Stock: true,
          },
        });
      }
    } catch (error) {
      console.error("Error creating or updating product:", error);
    } finally {
      await dbClient.$disconnect();
    }
  };

  deleteProductElement = async (
    command: DeleteProductListElementCommand,
  ): Promise<void> => {
    try {
      await dbClient.product.delete({
        where: { id: command.id },
      });
    } catch (error) {
      throw new Error(`Failed to delete product: ${error}`);
    } finally {
      await dbClient.$disconnect();
    }
  };
}

export const productsRepository = new ProductsRepository();
