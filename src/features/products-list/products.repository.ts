// import { dbClient } from "@/shared/lib/db"
// import { cache } from "react"
// class ProductsRepository {



//   async getSupplierId(id: string) {
//     // const connection = await dbClient.$connect();
//     try {
//       const supplier = await dbClient.supplier.findUnique({
//         where: {
//           userId: id,
//         },
//       })

//       return supplier || null
//     } catch {
//       return null
//     } finally {
//       await dbClient.$disconnect()
//     }
//   }

//   async getProductsList() {
//     // const connection = await dbClient.$connect();
//     try {
//       const products = await dbClient.product.findMany()
//       return products
//     } catch {
//       return []
//     } finally {
//       await dbClient.$disconnect()
//     }
//   }

//   async getStockList() {
//     // const connection = await dbClient.$connect();
//     try {
//       const stocks = await dbClient.stock.findMany({
//         include: {
//           product: true,
//           supplier: true,
//         },
//       })
//       return stocks
//     } catch {
//       return []
//     } finally {
//       await dbClient.$disconnect()
//     }
//   }

//   async getStockListById(id: string) {
//     // –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ id
//     const supplier = await dbClient.supplier.findUnique({
//       where: {
//         userId: id,
//       },
//     })
//     // –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω, –≤—ã–≥—Ä—É–∂–∞–µ–º –µ–≥–æ —Å–∫–ª–∞–¥
//     if (supplier) {
//       try {
//         const stocks = await dbClient.stock.findMany({
//           where: {
//             supplierId: supplier?.id,
//           },
//           include: {
//             product: true,
//             supplier: true,
//           },
//         })
//         return stocks
//       } finally {
//         await dbClient.$disconnect()
//       }
//     } else {
//       return []
//     }
//   }

 

//   addOrUpdateProduct = async (command: addOrUpdateProductCommand) => {
//     console.log("üöÄ ~ ProductsRepository ~ addOrUpdateProduct= ~ command:", command)
//     try {
//       // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ –µ–≥–æ —Ç–∞—Ä–∏—Ñ
//       const supplier = await dbClient.supplier.findUnique({
//         where: { id: Number(command.supplierId) },
//         include: { tariff: true, subscriptions: true },
//       })
//       console.log("üöÄ ~ ProductsRepository ~ addOrUpdateProduct= ~ supplier:", supplier)

//       if (!supplier) {
//         return { error: "–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" }
//       }


//       const currentSubscription = supplier.subscriptions.find(
//         (subscription) => {
//           const now = new Date()
//           return subscription.startDate <= now && subscription.endDate >= now
//         },
//       )

//       if (!currentSubscription) {
//         return { error: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏" } 
//       }

//       // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö SKU –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
//       const currentProductsCount = await dbClient.stock.count({
//         where: { supplierId: Number(command.supplierId) },
//       })

//       if (supplier.tariff && currentProductsCount >= supplier.tariff.maxProducts) {
//         return { error: `–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ ${supplier.tariff?.maxProducts} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞` }
//       }

//       // –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ sku
//       const existingProduct = await dbClient.product.findUnique({
//         where: {
//           sku: command.sku,
//         },
//       })
//       // –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –ø–æ id –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
//       const isProductExistInSupplierStock = await dbClient.stock.findFirst({
//         where: {
//           productId: existingProduct?.id,
//           supplierId: Number(command.supplierId),
//         },
//       })
//       // –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
//       if (existingProduct) {
//         if (isProductExistInSupplierStock?.id) {
//           await dbClient.stock.update({
//             where: {
//               id: isProductExistInSupplierStock.id,
//               // productId: existingProduct?.id,
//             },
//             data: {
//               quantity: Number(command.quantity),
//             },
//           })
//         } else {
//           await dbClient.stock.create({
//             data: {
//               productId: existingProduct.id,
//               supplierId: Number(command.supplierId),
//               quantity: Number(command.quantity),
//             },
//           })
//         }
//       } else {
//         // –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
//         const newProduct = await dbClient.product.create({
//           data: {
//             sku: command.sku,
//             name: command.name,
//             description: command.description,
//             Stock: {
//               create: {
//                 quantity: Number(command.quantity),
//                 supplier: {
//                   connect: { id: Number(command.supplierId) },
//                 },
//               },
//             },
//           },
//           include: {
//             Stock: true,
//           },
//         })
//       }
//       return { success: "–ü—Ä–æ–¥—É–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã" };
//     } catch (error) {
//     return { error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'};
//     }
//   }

//   deleteStockElement = async (stockId: string): Promise<void> => {
//     try {
//       await dbClient.stock.delete({
//         where: { id: stockId },
//       })
//     } catch (error) {
//       throw new Error(`Failed to delete product: ${error}`)
//     } finally {
//       await dbClient.$disconnect()
//     }
//   }

//   deleteProductElement = async (
//     command: DeleteProductListElementCommand,
//   ): Promise<void> => {
//     try {
//       console.log('deleting')
//       await dbClient.product.delete({
//         where: { id: command.id },
//       })
//     } catch (error) {
//       throw new Error(`Failed to delete product: ${error}`)
//     } finally {
//       await dbClient.$disconnect()
//     }
//   }
// }

// export const productsRepository = new ProductsRepository()
